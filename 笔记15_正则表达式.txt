# encoding: UTF-8
import re
#match是否在起始位置找到
point = re.match('www','www.runoob.com').span()
print point
#是否包含
point = re.search('com', 'www.run.com.oob.com').span()
print point
#
point = re.search('c..m','www.run.com.oob.coum').span()
print point

#包含http
point = re.search('http://.+','fdsahttp://www.baidu.comwwww').span()
print point

#匹配email
point = re.search('^[0-9a-zA-Z_]{1,}@[0-9a-zA-Z]{1,}\.[0-9a-zA-Z]{1,}$',"taolue@126.com").span()
print point

#必须是数字
point = re.search('^[0-9\.]{1,}$',"45674566757").span()
print point

#正则中的或者
#|表或者
point= re.search("^[0-9]{8}$|^[0-9]{11}$","1369120690")

#校验日期
point=re.search('^[0-9]{4}-[0-1]{0,1}[0-9]{1}-[0-3]{0,1}[0-9]{1}$','2017-03-05');

#正则替换
phone = "2004-959-559 # This is Phone Number"
num = re.sub(r'#.*$', "111", phone)
print "Phone Num : ", num

#把所有字符转成*
pwd = re.sub(r'.', "*", phone)
print pwd
#把所有数字转换成*
pwd = re.sub(r'[0-9]', "*", phone)
print pwd

#提取字串中所有的符合条件的正则
mm = re.findall('<a href=\"(.*)\">(.*)</a>', 'www.run.<a href=\"www.sohu.com\">sohu</a>com\r\ncom.aab<a href=\"www.sina.com\">sina</a>bcc.com.rrjkfgjhghjghjgbhjghj')
print(mm)
#----------------------------------------------------------
# encoding: UTF-8
import re

#search扫描整个字符串并返回第一个成功的匹配。
#match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None

#1.判断是否在开头匹配
#print(re.match('www', 'www.runoob.com').span())  # 在起始位置匹配,输出(0,3),
#print(re.match('www', 'www.runoob.com'))         # 不在起始位置匹配,输出None

print(re.match('com', 'www.runoob.com')==None) #判断是否在起始位置匹配

#2.判断是否包含,找遇到的第1个
print(re.search('com', 'www.run.com.oob.com').span()) #只拿第1个

#3.用re.M和re.I
#re.M 忽略正则的开始和结束符
#re.I 忽略大小写
print(re.search('^com', 'www.run.Com\r\ncom.aabbcc.com.rr',re.M).span())

mobj = re.match( r'(.*)com(.*)com(.*)', 'www.run.com,com.aabbcc.com.rr')

print(mobj.group(1))

phone = "2004-959-559 # This is Phone Number"

# Delete Python-style comments
#正则替换,把符合正则的字符串替换成第2个参数中的字符串
num = re.sub(r'#.*$', "111", phone)
print "Phone Num : ", num

#把任何非数字的字符替换成第2个参数中的字符
num = re.sub(r'\D', "", phone)    
print "Phone Num : ", num

#劈串

mm = re.split(",","aa,bb,cc,dd,ee")
print(mm)

#提取字串中所有的符合条件的正则
mm = re.findall('<a href=\"(.*)\">(.*)</a>', 'www.run.<a href=\"www.sohu.com\">sohu</a>com\r\ncom.aab<a href=\"www.sina.com\">sina</a>bcc.com.rr')
print(mm)

#只提取遇到的第一个
mm = re.search('<a href=\"(.*)\">(.*)</a>', 'www.run.<a href=\"www.sohu.com\">sohu</a>com\r\ncom.aab<a href=\"www.sina.com\">sina</a>bcc.com.rr')
print(mm.group(2))


|<a href="id-\d+\.html">.+?</a>|

mm = re.search('\"(.+?)\"',line)  #查找两个""之间的
print(mm.group(2))

正则表达式修饰符
修饰符	描述
re.I	使匹配对大小写不敏感
re.L	做本地化识别（locale-aware）匹配
re.M	多行匹配，影响 ^ 和 $
re.S	使 . 匹配包括换行在内的所有字符
re.U	根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.
re.X	该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。

模式	描述
^	匹配字符串的开头
$	匹配字符串的末尾。
.	匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。
[...]	用来表示一组字符,单独列出：[amk] 匹配 'a'，'m'或'k'
[^...]	不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。
re*	匹配0个或多个的表达式。
re+	匹配1个或多个的表达式。
re?	匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式
re{ n}	
re{ n,}	精确匹配n个前面表达式。
re{ n, m}	匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式
a| b	匹配a或b
(re)	G匹配括号内的表达式，也表示一个组
(?imx)	正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。
(?-imx)	正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。
(?: re)	类似 (...), 但是不表示一个组
(?imx: re)	在括号中使用i, m, 或 x 可选标志
(?-imx: re)	在括号中不使用i, m, 或 x 可选标志
(?#...)	注释.
(?= re)	前向肯定界定符。如果所含正则表达式，以 ... 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。
(?! re)	前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功
(?> re)	匹配的独立模式，省去回溯。
\w	匹配字母数字及下划线
\W	匹配非字母数字及下划线
\s	匹配任意空白字符，等价于 [\t\n\r\f].
\S	匹配任意非空字符
\d	匹配任意数字，等价于 [0-9].
\D	匹配任意非数字
\A	匹配字符串开始
\Z	匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。c
\z	匹配字符串结束
\G	匹配最后匹配完成的位置。
\b	匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\b' 可以匹配"never" 中的 'er'，但不能匹配 "verb" 中的 'er'。
\B	匹配非单词边界。'er\B' 能匹配 "verb" 中的 'er'，但不能匹配 "never" 中的 'er'。
\n, \t, 等.	匹配一个换行符。匹配一个制表符。等
\1...\9	匹配第n个分组的子表达式。
\10	匹配第n个分组的子表达式，如果它经匹配。否则指的是八进制字符码的表达式。

